# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          sudo apt install libmpfr-dev libgmp-dev -y
          git clone https://github.com/Project-Muteki/gcc.git gcc
          git clone https://github.com/Project-Muteki/binutils-gdb.git binutils
          git clone https://github.com/Project-Muteki/newlib.git newlib
          git clone https://github.com/Project-Muteki/muteki-shims.git shims
          mkdir $GITHUB_WORKSPACE/bestagcc
          export PREFIXDIR="$GITHUB_WORKSPACE/bestagcc"
          export TARGET="arm-none-bestaeabi"
          export J="-j `nproc`"
          mkdir binutils-build
          cd binutils-build
          ../binutils/configure --prefix="${PREFIXDIR}" --target="${TARGET}"  --disable-multilib --disable-werror --enable-lto --enable-plugins --with-zlib=yes  --disable-shared
          make $J
          make install
          cd ..
          mkdir gcc-build
          cd gcc-build
          cd ../gcc
          ./contrib/download_prerequisites
          cd ../gcc-build
          ../gcc/configure --prefix="${PREFIXDIR}" --target="${TARGET}" --enable-languages=c,c++ --disable-multilib --disable-shared
          make $J all-gcc
          make install-gcc
          make install-lto-plugin

          # Building anything with GCC also requires libgcc.
          make $J all-target-libgcc
          make install-target-libgcc
          cd ..
          export PATH="${PREFIXDIR}/bin:$PATH"
          cd shims
          sudo apt install meson -y
          meson setup --prefix "${PREFIXDIR}" --cross-file meson-cross/arm-none-bestaeabi.ini build
          meson compile -C build
          meson install  -C build
          mkdir newlib-build
          cd newlib-build
          ../newlib/configure --prefix="${PREFIXDIR}" --target="${TARGET}" 
          make $J
          make install
          cd ..
          cd gcc-build
          make $J
          make install
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.3.3
        with:
          name: bestagcc
          path: ${{github.workspace}}/bestagcc
